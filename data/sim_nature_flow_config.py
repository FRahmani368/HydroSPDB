"""a data config class for simulated natural flow generated by model trained by dataset of ref basins"""
import collections
import os
from configparser import ConfigParser

from data import wrap_master, GagesConfig


class SimNatureFlowConfig(GagesConfig):
    def __init__(self, config_file, subdir=None):
        super().__init__(config_file)
        if subdir:
            self.data_path["Out"] = os.path.join(self.data_path["Out"], subdir)
            self.data_path["Temp"] = os.path.join(self.data_path["Temp"], subdir)
            if not os.path.isdir(self.data_path["Out"]):
                os.makedirs(self.data_path["Out"])
            if not os.path.isdir(self.data_path["Temp"]):
                os.makedirs(self.data_path["Temp"])

    def init_model_param(self):
        config_file = self.config_file
        cfg = ConfigParser()
        cfg.read(config_file)
        section = 'model'
        options = cfg.options(section)
        # train and test time range
        t_range_train = eval(cfg.get(section, options[0]))
        t_range_test = eval(cfg.get(section, options[1]))
        # data processing parameter
        do_norm = eval(cfg.get(section, options[2]))
        rm_nan = eval(cfg.get(section, options[3]))
        da_obs = eval(cfg.get(section, options[4]))
        opt_data = collections.OrderedDict(tRangeTrain=t_range_train, tRangeTest=t_range_test, doNorm=do_norm,
                                           rmNan=rm_nan, daObs=da_obs)

        # model parameters. 首先读取几个训练使用的基本模型参数，主要是epoch和batch
        mini_batch = eval(cfg.get(section, options[5]))
        n_epoch = eval(cfg.get(section, options[6]))
        save_epoch = eval(cfg.get(section, options[7]))
        opt_train = collections.OrderedDict(miniBatch=mini_batch, nEpoch=n_epoch, saveEpoch=save_epoch)

        # 接着是模型输入输出的相关参数。根据opt_data判断输入输出变量个数，确定模型基本结构
        model_name = cfg.get(section, options[8])
        # 变量名不要修改!!!!!!!!!!!!!!!!!!!!!!!!!!，因为后面eval执行会用到varT和varC这两个变量名。 除非修改配置文件
        hidden_size = eval(cfg.get(section, options[9]))
        do_relu = eval(cfg.get(section, options[10]))
        seq_length = eval(cfg.get(section, options[11]))
        opt_model = collections.OrderedDict(name=model_name, hiddenSize=hidden_size, doReLU=do_relu,
                                            seqLength=seq_length)

        # 最后是loss的配置
        loss_name = cfg.get(section, options[12])
        prior = cfg.get(section, options[13])
        opt_loss = collections.OrderedDict(name=loss_name, prior=prior)

        return opt_data, opt_train, opt_model, opt_loss

    def read_data_config(self):
        data_config_now = super().read_data_config()

        dir_temp = self.data_path.get("Temp")
        data_config_now["sim_source_data_file"] = os.path.join(dir_temp, "sim_source_data.txt")
        data_config_now["sim_data_flow_file"] = os.path.join(dir_temp, "sim_data_flow")
        data_config_now["sim_data_forcing_file"] = os.path.join(dir_temp, "sim_data_forcing")
        data_config_now["sim_data_attr_file"] = os.path.join(dir_temp, "sim_data_attr")
        data_config_now["sim_f_dict_file"] = os.path.join(dir_temp, "sim_f_dict.json")
        data_config_now["sim_var_dict_file"] = os.path.join(dir_temp, "sim_var_dict.json")
        data_config_now["sim_t_s_dict_file"] = os.path.join(dir_temp, "sim_t_s_dict.json")
        data_config_now["sim_stat_dict_file"] = os.path.join(dir_temp, "sim_stat_dict.json")

        return data_config_now

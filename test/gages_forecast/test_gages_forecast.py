import unittest

import definitions
from data import GagesConfig, GagesSource, DataModel
from data.data_config import add_model_param
from data.data_input import save_datamodel, GagesModel
from data.gages_input_dataset import GagesForecastDataModel
from explore.stat import statError
from hydroDL.master.master import train_lstm_forecast, test_lstm_forecast
import numpy as np
import os
import pandas as pd
from utils.dataset_format import subset_of_dict
from visual import plot_ts_obs_pred
from visual.plot_model import plot_boxes_inds, plot_ind_map


class MyTestCase(unittest.TestCase):
    """historical data assimilation"""

    def setUp(self) -> None:
        """before all of these, natural flow model need to be generated by config.ini of gages dataset, and it need
        to be moved to right dir manually """
        config_dir = definitions.CONFIG_DIR

        # self.sim_config_file = os.path.join(config_dir, "forecast/config_forecast_1_exp1.ini")
        # self.config_file = os.path.join(config_dir, "forecast/config_forecast_2_exp1.ini")
        # self.subdir = r"forecast/exp1"

        self.sim_config_file = os.path.join(config_dir, "forecast/config_forecast_1_exp2.ini")
        self.config_file = os.path.join(config_dir, "forecast/config_forecast_2_exp2.ini")
        self.subdir = r"forecast/exp2"

        self.sim_config_data = GagesConfig.set_subdir(self.sim_config_file, self.subdir)
        self.config_data = GagesConfig.set_subdir(self.config_file, self.subdir)
        add_model_param(self.config_data, "model", seqLength=7, fcstLength=2)

    def test_forecast_data_temp(self):
        sim_config_data = self.sim_config_data
        sim_source_data = GagesSource(sim_config_data, sim_config_data.model_dict["data"]["tRangeTrain"])
        sim_df = DataModel(sim_source_data)
        save_datamodel(sim_df, "1", data_source_file_name='data_source.txt',
                       stat_file_name='Statistics.json', flow_file_name='flow', forcing_file_name='forcing',
                       attr_file_name='attr', f_dict_file_name='dictFactorize.json',
                       var_dict_file_name='dictAttribute.json', t_s_dict_file_name='dictTimeSpace.json')

        config_data = self.config_data
        source_data = GagesSource(config_data, config_data.model_dict["data"]["tRangeTrain"])
        df = DataModel(source_data)
        save_datamodel(df, "2", data_source_file_name='data_source.txt',
                       stat_file_name='Statistics.json', flow_file_name='flow', forcing_file_name='forcing',
                       attr_file_name='attr', f_dict_file_name='dictFactorize.json',
                       var_dict_file_name='dictAttribute.json', t_s_dict_file_name='dictTimeSpace.json')

    def test_forecast_train(self):
        sim_df = GagesModel.load_datamodel(self.sim_config_data.data_path["Temp"], "1",
                                           data_source_file_name='data_source.txt',
                                           stat_file_name='Statistics.json', flow_file_name='flow.npy',
                                           forcing_file_name='forcing.npy', attr_file_name='attr.npy',
                                           f_dict_file_name='dictFactorize.json',
                                           var_dict_file_name='dictAttribute.json',
                                           t_s_dict_file_name='dictTimeSpace.json')
        df = GagesModel.load_datamodel(self.config_data.data_path["Temp"], "2", data_source_file_name='data_source.txt',
                                       stat_file_name='Statistics.json', flow_file_name='flow.npy',
                                       forcing_file_name='forcing.npy', attr_file_name='attr.npy',
                                       f_dict_file_name='dictFactorize.json',
                                       var_dict_file_name='dictAttribute.json',
                                       t_s_dict_file_name='dictTimeSpace.json')
        data_input = GagesForecastDataModel(sim_df, df)
        train_lstm_forecast(data_input)

    def test_forecast_data_temp_test(self):
        sim_config_data = self.sim_config_data
        sim_source_data = GagesSource(sim_config_data, sim_config_data.model_dict["data"]["tRangeTest"])
        sim_df = DataModel(sim_source_data)
        save_datamodel(sim_df, "1", data_source_file_name='test_data_source.txt',
                       stat_file_name='test_Statistics.json', flow_file_name='test_flow',
                       forcing_file_name='test_forcing', attr_file_name='test_attr',
                       f_dict_file_name='test_dictFactorize.json', var_dict_file_name='test_dictAttribute.json',
                       t_s_dict_file_name='test_dictTimeSpace.json')

        config_data = self.config_data
        source_data = GagesSource(config_data, config_data.model_dict["data"]["tRangeTest"])
        df = DataModel(source_data)
        save_datamodel(df, "2", data_source_file_name='test_data_source.txt',
                       stat_file_name='test_Statistics.json', flow_file_name='test_flow',
                       forcing_file_name='test_forcing', attr_file_name='test_attr',
                       f_dict_file_name='test_dictFactorize.json', var_dict_file_name='test_dictAttribute.json',
                       t_s_dict_file_name='test_dictTimeSpace.json')

    def test_forecast_test(self):
        sim_df = GagesModel.load_datamodel(self.sim_config_data.data_path["Temp"], "1",
                                           data_source_file_name='test_data_source.txt',
                                           stat_file_name='test_Statistics.json', flow_file_name='test_flow.npy',
                                           forcing_file_name='test_forcing.npy', attr_file_name='test_attr.npy',
                                           f_dict_file_name='test_dictFactorize.json',
                                           var_dict_file_name='test_dictAttribute.json',
                                           t_s_dict_file_name='test_dictTimeSpace.json')
        df = GagesModel.load_datamodel(self.config_data.data_path["Temp"], "2",
                                       data_source_file_name='test_data_source.txt',
                                       stat_file_name='test_Statistics.json', flow_file_name='test_flow.npy',
                                       forcing_file_name='test_forcing.npy', attr_file_name='test_attr.npy',
                                       f_dict_file_name='test_dictFactorize.json',
                                       var_dict_file_name='test_dictAttribute.json',
                                       t_s_dict_file_name='test_dictTimeSpace.json')

        data_input = GagesForecastDataModel(sim_df, df)
        pred, obs = test_lstm_forecast(data_input)

        pred = pred.reshape(pred.shape[0], pred.shape[1])
        obs = obs.reshape(obs.shape[0], obs.shape[1])

        inds = statError(obs, pred)
        show_me_num = 5
        t_s_dict = data_input.model_data.t_s_dict
        sites = np.array(t_s_dict["sites_id"])
        t_range = np.array(t_s_dict["t_final_range"])
        time_seq_length = data_input.model_data.data_source.data_config.model_dict['model']['seqLength']
        time_start = np.datetime64(t_range[0]) + np.timedelta64(time_seq_length, 'D')
        t_range[0] = np.datetime_as_string(time_start, unit='D')
        ts_fig = plot_ts_obs_pred(obs, pred, sites, t_range, show_me_num)
        ts_fig.savefig(os.path.join(self.config_data.data_path["Out"], "ts_fig.png"))
        # # plot box，使用seaborn库
        keys = ["Bias", "RMSE", "NSE"]
        inds_test = subset_of_dict(inds, keys)
        box_fig = plot_boxes_inds(inds_test)
        box_fig.savefig(os.path.join(self.config_data.data_path["Out"], "box_fig.png"))
        # plot map
        sites_df = pd.DataFrame({"sites": sites, keys[2]: inds_test[keys[2]]})
        plot_ind_map(df.data_source.all_configs['gage_point_file'], sites_df)


if __name__ == '__main__':
    unittest.main()

import os
import unittest
import pandas as pd
from data import *
from data.data_input import save_datamodel
from data.gages_input_dataset import GagesModels
from explore.stat import statError
from hydroDL.master import *
from utils.dataset_format import subset_of_dict
from visual import *
import numpy as np
import definitions
from visual.plot_model import plot_boxes_inds


class MyTestCaseGagesNonref(unittest.TestCase):
    def setUp(self) -> None:
        """before all of these, natural flow model need to be generated by config.ini of gages dataset, and it need
        to be moved to right dir manually """
        config_dir = definitions.CONFIG_DIR
        # self.config_file = os.path.join(config_dir, "landuse/config_exp1.ini")
        # self.subdir = r"landuse/exp1"
        self.config_file = os.path.join(config_dir, "landuse/config_exp2.ini")
        self.subdir = r"landuse/exp2"
        self.config_data = GagesConfig.set_subdir(self.config_file, self.subdir)
        # ashu_gageid_file = os.path.join(self.config_data.data_path["DB"], "ashu", "AshuGagesId.txt")
        ashu_gageid_file = os.path.join(self.config_data.data_path["DB"], "ashu", "AshuGagesId.xlsx")
        gauge_df = pd.read_excel(ashu_gageid_file, dtype={"STAID": str})
        gauge_list_tmp = gauge_df["STAID"].values
        self.gauge_list = [str_tmp.zfill(8) for str_tmp in gauge_list_tmp]

    def test_gages_data_model(self):
        gages_model = GagesModels(self.config_data, sites_id=self.gauge_list)
        save_datamodel(gages_model.data_model_train, data_source_file_name='data_source.txt',
                       stat_file_name='Statistics.json', flow_file_name='flow', forcing_file_name='forcing',
                       attr_file_name='attr', f_dict_file_name='dictFactorize.json',
                       var_dict_file_name='dictAttribute.json', t_s_dict_file_name='dictTimeSpace.json')
        save_datamodel(gages_model.data_model_test, data_source_file_name='test_data_source.txt',
                       stat_file_name='test_Statistics.json', flow_file_name='test_flow',
                       forcing_file_name='test_forcing', attr_file_name='test_attr',
                       f_dict_file_name='test_dictFactorize.json', var_dict_file_name='test_dictAttribute.json',
                       t_s_dict_file_name='test_dictTimeSpace.json')
        print("read and save data model")

    def test_gages_nonref_train(self):
        print('Starting ...')
        config_data = self.config_data
        # 准备训练数据
        source_data = GagesSource(config_data, config_data.model_dict["data"]["tRangeTrain"])
        # 构建输入数据类对象
        data_model = DataModel(source_data)
        # 进行模型训练
        # train model
        os.environ["CUDA_VISIBLE_DEVICES"] = "2"
        master_train(data_model)

    def test_gages_nonref_test(self):
        config_data = self.config_data
        # 准备训练数据
        source_data = GagesSource(config_data, config_data.model_dict["data"]["tRangeTest"])
        data_model_test = DataModel(source_data)
        pred, obs = master_test(data_model_test)
        pred = pred.reshape(pred.shape[0], pred.shape[1])
        obs = obs.reshape(pred.shape[0], pred.shape[1])

        inds = statError(obs, pred)
        show_me_num = 5
        t_s_dict = data_model_test.t_s_dict
        sites = np.array(t_s_dict["sites_id"])
        t_range = np.array(t_s_dict["t_final_range"])
        ts_fig = plot_ts_obs_pred(obs, pred, sites, t_range, show_me_num)
        ts_fig.savefig(os.path.join(config_data.data_path["Out"], "ts_fig.png"))
        # plot box，使用seaborn库
        keys = ["Bias", "RMSE", "NSE"]
        inds_test = subset_of_dict(inds, keys)
        box_fig = plot_boxes_inds(inds_test)
        box_fig.savefig(os.path.join(config_data.data_path["Out"], "box_fig.png"))


if __name__ == '__main__':
    unittest.main()

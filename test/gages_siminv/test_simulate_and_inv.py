import copy
import unittest

import torch

import definitions
from data import GagesConfig
from data.data_config import add_model_param
from data.data_input import save_datamodel, GagesModel
from data.gages_input_dataset import GagesSimInvDataModel
from explore.stat import statError
from hydroDL.master.master import train_lstm_siminv, test_lstm_siminv
import numpy as np
import os

from utils.dataset_format import subset_of_dict
from visual import plot_ts_obs_pred
from visual.plot_model import plot_boxes_inds


class MyTestCaseSimulateAndInv(unittest.TestCase):
    def setUp(self) -> None:
        """before all of these, natural flow model need to be generated by config.ini of gages dataset, and it need
        to be moved to right dir manually """
        config_dir = definitions.CONFIG_DIR
        # self.config_file_1 = os.path.join(config_dir, "siminv/config_siminv_1_exp1.ini")
        # self.config_file_2 = os.path.join(config_dir, "siminv/config_siminv_2_exp1.ini")
        # self.config_file_3 = os.path.join(config_dir, "siminv/config_siminv_3_exp1.ini")
        # self.subdir = r"siminv/exp1"
        # self.config_file_1 = os.path.join(config_dir, "siminv/config_siminv_1_exp2.ini")
        # self.config_file_2 = os.path.join(config_dir, "siminv/config_siminv_2_exp2.ini")
        # self.config_file_3 = os.path.join(config_dir, "siminv/config_siminv_3_exp2.ini")
        # self.subdir = r"siminv/exp2"
        # self.config_file_1 = os.path.join(config_dir, "siminv/config_siminv_1_exp3.ini")
        # self.config_file_2 = os.path.join(config_dir, "siminv/config_siminv_2_exp3.ini")
        # self.config_file_3 = os.path.join(config_dir, "siminv/config_siminv_3_exp3.ini")
        # self.subdir = r"siminv/exp3"
        # self.config_file_1 = os.path.join(config_dir, "siminv/config_siminv_1_exp4.ini")
        # self.config_file_2 = os.path.join(config_dir, "siminv/config_siminv_2_exp4.ini")
        # self.config_file_3 = os.path.join(config_dir, "siminv/config_siminv_3_exp4.ini")
        # self.subdir = r"siminv/exp4"
        self.config_file_1 = os.path.join(config_dir, "siminv/config1_exp10.ini")
        self.config_file_2 = os.path.join(config_dir, "siminv/config2_exp10.ini")
        self.config_file_3 = os.path.join(config_dir, "siminv/config3_exp10.ini")
        self.subdir = r"siminv/exp10"
        self.config_data_sim = GagesConfig.set_subdir(self.config_file_1, self.subdir)
        self.config_data_inv = GagesConfig.set_subdir(self.config_file_2, self.subdir)
        self.config_data = GagesConfig.set_subdir(self.config_file_3, self.subdir)
        add_model_param(self.config_data_inv, "model", seqLength=7)

    def test_siminv_data_temp(self):
        quick_data_dir = os.path.join(self.config_data_sim.data_path["DB"], "quickdata")
        data_dir_allref = os.path.join(quick_data_dir, "allref_85-05_nan-0.1_00-1.0")
        data_dir_allnonref = os.path.join(quick_data_dir, "allnonref_85-05_nan-0.1_00-1.0")
        data_model_allref_train = GagesModel.load_datamodel(data_dir_allref,
                                                            data_source_file_name='data_source.txt',
                                                            stat_file_name='Statistics.json', flow_file_name='flow.npy',
                                                            forcing_file_name='forcing.npy', attr_file_name='attr.npy',
                                                            f_dict_file_name='dictFactorize.json',
                                                            var_dict_file_name='dictAttribute.json',
                                                            t_s_dict_file_name='dictTimeSpace.json')
        data_model_allref_test = GagesModel.load_datamodel(data_dir_allref,
                                                           data_source_file_name='test_data_source.txt',
                                                           stat_file_name='test_Statistics.json',
                                                           flow_file_name='test_flow.npy',
                                                           forcing_file_name='test_forcing.npy',
                                                           attr_file_name='test_attr.npy',
                                                           f_dict_file_name='test_dictFactorize.json',
                                                           var_dict_file_name='test_dictAttribute.json',
                                                           t_s_dict_file_name='test_dictTimeSpace.json')
        data_model_allnonref_train = GagesModel.load_datamodel(data_dir_allnonref,
                                                               data_source_file_name='data_source.txt',
                                                               stat_file_name='Statistics.json',
                                                               flow_file_name='flow.npy',
                                                               forcing_file_name='forcing.npy',
                                                               attr_file_name='attr.npy',
                                                               f_dict_file_name='dictFactorize.json',
                                                               var_dict_file_name='dictAttribute.json',
                                                               t_s_dict_file_name='dictTimeSpace.json')
        data_model_allnonref_test = GagesModel.load_datamodel(data_dir_allnonref,
                                                              data_source_file_name='test_data_source.txt',
                                                              stat_file_name='test_Statistics.json',
                                                              flow_file_name='test_flow.npy',
                                                              forcing_file_name='test_forcing.npy',
                                                              attr_file_name='test_attr.npy',
                                                              f_dict_file_name='test_dictFactorize.json',
                                                              var_dict_file_name='test_dictAttribute.json',
                                                              t_s_dict_file_name='test_dictTimeSpace.json')
        sim_gages_model_train = GagesModel.update_data_model(self.config_data_sim, data_model_allref_train)
        sim_gages_model_test = GagesModel.update_data_model(self.config_data_sim, data_model_allref_test)
        t_range_inv = self.config_data_inv.model_dict["data"]["tRangeTrain"]
        inv_gages_model_train = GagesModel.update_data_model(self.config_data_inv, data_model_allnonref_train,
                                                             t_range_inv)
        inv_gages_model_test = copy.deepcopy(inv_gages_model_train)
        t_range_train = self.config_data.model_dict["data"]["tRangeTrain"]
        t_range_test = self.config_data.model_dict["data"]["tRangeTest"]
        gages_model_train = GagesModel.update_data_model(self.config_data, data_model_allnonref_test, t_range_train)
        gages_model_test = GagesModel.update_data_model(self.config_data, data_model_allnonref_test, t_range_test)

        save_datamodel(sim_gages_model_train, "1", data_source_file_name='data_source.txt',
                       stat_file_name='Statistics.json', flow_file_name='flow', forcing_file_name='forcing',
                       attr_file_name='attr', f_dict_file_name='dictFactorize.json',
                       var_dict_file_name='dictAttribute.json', t_s_dict_file_name='dictTimeSpace.json')
        save_datamodel(sim_gages_model_test, "1", data_source_file_name='test_data_source.txt',
                       stat_file_name='test_Statistics.json', flow_file_name='test_flow',
                       forcing_file_name='test_forcing', attr_file_name='test_attr',
                       f_dict_file_name='test_dictFactorize.json', var_dict_file_name='test_dictAttribute.json',
                       t_s_dict_file_name='test_dictTimeSpace.json')
        save_datamodel(inv_gages_model_train, "2", data_source_file_name='data_source.txt',
                       stat_file_name='Statistics.json', flow_file_name='flow', forcing_file_name='forcing',
                       attr_file_name='attr', f_dict_file_name='dictFactorize.json',
                       var_dict_file_name='dictAttribute.json', t_s_dict_file_name='dictTimeSpace.json')
        save_datamodel(inv_gages_model_test, "2", data_source_file_name='test_data_source.txt',
                       stat_file_name='test_Statistics.json', flow_file_name='test_flow',
                       forcing_file_name='test_forcing', attr_file_name='test_attr',
                       f_dict_file_name='test_dictFactorize.json', var_dict_file_name='test_dictAttribute.json',
                       t_s_dict_file_name='test_dictTimeSpace.json')
        save_datamodel(gages_model_train, "3", data_source_file_name='data_source.txt',
                       stat_file_name='Statistics.json', flow_file_name='flow', forcing_file_name='forcing',
                       attr_file_name='attr', f_dict_file_name='dictFactorize.json',
                       var_dict_file_name='dictAttribute.json', t_s_dict_file_name='dictTimeSpace.json')
        save_datamodel(gages_model_test, "3", data_source_file_name='test_data_source.txt',
                       stat_file_name='test_Statistics.json', flow_file_name='test_flow',
                       forcing_file_name='test_forcing', attr_file_name='test_attr',
                       f_dict_file_name='test_dictFactorize.json', var_dict_file_name='test_dictAttribute.json',
                       t_s_dict_file_name='test_dictTimeSpace.json')
        print("read and save data model")

    def test_siminv_train(self):
        with torch.cuda.device(0):
            df1 = GagesModel.load_datamodel(self.config_data_sim.data_path["Temp"], "1",
                                            data_source_file_name='data_source.txt',
                                            stat_file_name='Statistics.json', flow_file_name='flow.npy',
                                            forcing_file_name='forcing.npy', attr_file_name='attr.npy',
                                            f_dict_file_name='dictFactorize.json',
                                            var_dict_file_name='dictAttribute.json',
                                            t_s_dict_file_name='dictTimeSpace.json')
            df1.update_model_param('train', nEpoch=300)
            df2 = GagesModel.load_datamodel(self.config_data_inv.data_path["Temp"], "2",
                                            data_source_file_name='data_source.txt',
                                            stat_file_name='Statistics.json', flow_file_name='flow.npy',
                                            forcing_file_name='forcing.npy', attr_file_name='attr.npy',
                                            f_dict_file_name='dictFactorize.json',
                                            var_dict_file_name='dictAttribute.json',
                                            t_s_dict_file_name='dictTimeSpace.json')
            df3 = GagesModel.load_datamodel(self.config_data.data_path["Temp"], "3",
                                            data_source_file_name='data_source.txt',
                                            stat_file_name='Statistics.json', flow_file_name='flow.npy',
                                            forcing_file_name='forcing.npy', attr_file_name='attr.npy',
                                            f_dict_file_name='dictFactorize.json',
                                            var_dict_file_name='dictAttribute.json',
                                            t_s_dict_file_name='dictTimeSpace.json')
            data_model = GagesSimInvDataModel(df1, df2, df3)
            train_lstm_siminv(data_model)

    def test_siminv_test(self):
        df1 = GagesModel.load_datamodel(self.config_data_sim.data_path["Temp"], "1",
                                        data_source_file_name='test_data_source.txt',
                                        stat_file_name='test_Statistics.json', flow_file_name='test_flow.npy',
                                        forcing_file_name='test_forcing.npy', attr_file_name='test_attr.npy',
                                        f_dict_file_name='test_dictFactorize.json',
                                        var_dict_file_name='test_dictAttribute.json',
                                        t_s_dict_file_name='test_dictTimeSpace.json')
        df1.update_model_param('train', nEpoch=300)
        df2 = GagesModel.load_datamodel(self.config_data_inv.data_path["Temp"], "2",
                                        data_source_file_name='test_data_source.txt',
                                        stat_file_name='test_Statistics.json', flow_file_name='test_flow.npy',
                                        forcing_file_name='test_forcing.npy', attr_file_name='test_attr.npy',
                                        f_dict_file_name='test_dictFactorize.json',
                                        var_dict_file_name='test_dictAttribute.json',
                                        t_s_dict_file_name='test_dictTimeSpace.json')
        df3 = GagesModel.load_datamodel(self.config_data.data_path["Temp"], "3",
                                        data_source_file_name='test_data_source.txt',
                                        stat_file_name='test_Statistics.json', flow_file_name='test_flow.npy',
                                        forcing_file_name='test_forcing.npy', attr_file_name='test_attr.npy',
                                        f_dict_file_name='test_dictFactorize.json',
                                        var_dict_file_name='test_dictAttribute.json',
                                        t_s_dict_file_name='test_dictTimeSpace.json')
        data_model = GagesSimInvDataModel(df1, df2, df3)
        pred, obs = test_lstm_siminv(data_model)

        pred = pred.reshape(pred.shape[0], pred.shape[1])
        obs = obs.reshape(obs.shape[0], obs.shape[1])

        inds = statError(obs, pred)
        show_me_num = 5
        t_s_dict = data_model.test_t_s_dict
        sites = np.array(t_s_dict["sites_id"])
        # TODO: time been cut, so change it
        t_range = np.array(t_s_dict["t_final_range"])
        ts_fig = plot_ts_obs_pred(obs, pred, sites, t_range, show_me_num)
        ts_fig.savefig(os.path.join(self.config_data_inv.data_path["Out"], "ts_fig.png"))
        # plot box，使用seaborn库
        keys = ["Bias", "RMSE", "NSE"]
        inds_test = subset_of_dict(inds, keys)
        box_fig = plot_boxes_inds(inds_test)
        box_fig.savefig(os.path.join(self.config_data_inv.data_path["Out"], "box_fig.png"))


if __name__ == '__main__':
    unittest.main()

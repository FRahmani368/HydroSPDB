import os
import unittest

import torch

import definitions
from data.data_input import save_datamodel, CamelsModel, _basin_norm
from data.susquehanna_input import SusquehannaConfig, SusquehannaSource, SusquehannaModel
from hydroDL.master.master import master_test
from utils import serialize_numpy
from visual.plot_model import plot_we_need


class MyTestCase(unittest.TestCase):
    def setUp(self) -> None:
        """before all of these, natural flow model need to be generated by config.ini of gages dataset, and it need
        to be moved to right dir manually """
        config_dir = definitions.CONFIG_DIR
        self.config_file = os.path.join(config_dir, "susquehanna/config_exp1.ini")
        self.subdir = r"susquehanna/exp1"
        self.config_data = SusquehannaConfig.set_subdir(self.config_file, self.subdir)

    def test_Susquehanna(self):
        t_test = self.config_data.model_dict["data"]["tRangeTest"]
        source_data = SusquehannaSource(self.config_data, t_test)
        # 构建输入数据类对象
        data_model = SusquehannaModel(source_data)
        with torch.cuda.device(1):
            # pred, obs = master_test(data_model)
            pred, obs = master_test(data_model, epoch=300)
            basin_area = data_model.data_source.read_attr(data_model.t_s_dict["sites_id"], ['area_gages2'],
                                                          is_return_dict=False)
            mean_prep = data_model.data_source.read_attr(data_model.t_s_dict["sites_id"], ['p_mean'],
                                                         is_return_dict=False)
            pred = _basin_norm(pred, basin_area, mean_prep, to_norm=False)
            obs = _basin_norm(obs, basin_area, mean_prep, to_norm=False)
            flow_pred_file = os.path.join(data_model.data_source.data_config.data_path['Temp'], 'flow_pred')
            flow_obs_file = os.path.join(data_model.data_source.data_config.data_path['Temp'], 'flow_obs')
            serialize_numpy(pred, flow_pred_file)
            serialize_numpy(obs, flow_obs_file)
            plot_we_need(data_model, obs, pred, id_col="id", lon_col="lon", lat_col="lat")


if __name__ == '__main__':
    unittest.main()

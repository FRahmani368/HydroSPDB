import os
import unittest
import numpy as np
import definitions
from data import CamelsConfig, CamelsSource, DataModel
from explore.stat import statError
from hydroDL.master.master import train_lstm_without_first_linear, test_lstm_without_first_linear
from utils.dataset_format import subset_of_dict
from visual import plot_ts_obs_pred, plot_box_inds


class MyTestCase(unittest.TestCase):
    def setUp(self) -> None:
        """before all of these, natural flow model need to be generated by config.ini of gages dataset, and it need
        to be moved to right dir manually """
        config_dir = definitions.CONFIG_DIR
        self.config_file = os.path.join(config_dir, "camels/config_nonref_exp1.ini")
        self.subdir = r"basic/exp1"

    def test_camels_lstm_without_1stlinear(self):
        print('Starting ...')
        # 读取模型配置文件
        config_data = CamelsConfig.set_subdir(self.config_file, self.subdir)
        # 准备训练数据
        source_data = CamelsSource(config_data, config_data.model_dict["data"]["tRangeTrain"])
        # 构建输入数据类对象
        data_model = DataModel(source_data)
        # 进行模型训练
        # train model
        os.environ["CUDA_VISIBLE_DEVICES"] = "2"
        train_lstm_without_first_linear(data_model)

    def test_camels_lstm_without_lstmlinear_test(self):
        config_data = CamelsConfig.set_subdir(self.config_file, self.subdir)
        # 准备训练数据
        source_data = CamelsSource(config_data, config_data.model_dict["data"]["tRangeTest"])
        data_model_test = DataModel(source_data)
        pred, obs = test_lstm_without_first_linear(data_model_test)
        pred = pred.reshape(pred.shape[0], pred.shape[1])
        obs = obs.reshape(pred.shape[0], pred.shape[1])

        inds = statError(obs, pred)
        show_me_num = 5
        t_s_dict = data_model_test.t_s_dict
        sites = np.array(t_s_dict["sites_id"])
        t_range = np.array(t_s_dict["t_final_range"])
        plot_ts_obs_pred(obs, pred, sites, t_range, show_me_num)

        # plot box，使用seaborn库
        # keys = ["Bias", "RMSE"]
        keys = ["NSE"]
        inds_test = subset_of_dict(inds, keys)
        plot_box_inds(inds_test)

if __name__ == '__main__':
    unittest.main()

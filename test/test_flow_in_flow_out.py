import os
import unittest

import definitions
from data.sim_input_dataset import SimInputDataset
from data.sim_nature_flow_config import SimNatureFlowConfig
from data.sim_nature_flow_source import SimNatureFlowSource
from hydroDL.master.master import train_natural_flow
from utils import serialize_numpy


class MyTestCase(unittest.TestCase):

    def setUp(self) -> None:
        """before all of these, natural flow model need to be generated by config.ini of gages dataset, and it need
        to be moved to right dir manually """
        config_dir = definitions.CONFIG_DIR
        self.sim_config_file = os.path.join(config_dir, "config_natureflow_1.ini")
        self.config_file = os.path.join(config_dir, "config_natureflow_2.ini")

    def test_sim_nature_flow_source(self):
        config_data = SimNatureFlowConfig(self.config_file)
        source_data = SimNatureFlowSource(config_data, config_data.model_dict["data"]["tRangeTrain"],
                                          self.sim_config_file)
        source_data.write_temp_source()

    def test_natural_flow_in_train(self):
        """using natural flow generated by model trained by choosed allref basins in CAMELS dataset"""
        config_data = SimNatureFlowConfig(self.config_file)
        source_data = SimNatureFlowSource.get_sim_nature_flow_source(config_data,
                                                                     config_data.model_dict["data"]["tRangeTrain"],
                                                                     self.sim_config_file)
        # input flow generated by model to model
        training_set = SimInputDataset(source_data)
        train_natural_flow(training_set)

    def test_natural_flow_in_test(self):
        print("testing")


if __name__ == '__main__':
    unittest.main()

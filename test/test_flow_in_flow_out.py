import os
import unittest
import numpy as np
import definitions
from data.sim_input_dataset import SimInputDataset, SimNatureFlowInput
from data.sim_nature_flow_config import SimNatureFlowConfig
from data.sim_nature_flow_source import SimNatureFlowSource
from explore.stat import statError
from hydroDL.master.master import train_natural_flow, test_natural_flow, master_train_natural_flow, \
    master_test_natural_flow
from utils.dataset_format import subset_of_dict
from visual import plot_ts_obs_pred
from visual.plot_model import plot_boxes_inds


class MyTestCase(unittest.TestCase):

    def setUp(self) -> None:
        """before all of these, natural flow model need to be generated by config.ini of gages dataset, and it need
        to be moved to right dir manually """
        config_dir = definitions.CONFIG_DIR
        # self.sim_config_file = os.path.join(config_dir, "simulate/config_natureflow_1_exp2.ini")
        # self.config_file = os.path.join(config_dir, "simulate/config_natureflow_2_exp2.ini")
        # self.subdir = "simulate/exp2"
        # self.sim_config_file = os.path.join(config_dir, "simulate/config_natureflow_1_exp3.ini")
        # self.config_file = os.path.join(config_dir, "simulate/config_natureflow_2_exp3.ini")
        # self.subdir = "simulate/exp3"
        self.sim_config_file = os.path.join(config_dir, "simulate/config_natureflow_1_exp4.ini")
        self.config_file = os.path.join(config_dir, "simulate/config_natureflow_2_exp4.ini")
        self.subdir = "simulate/exp4"

    def test_sim_nature_flow_source(self):
        config_data = SimNatureFlowConfig(self.config_file, self.subdir)
        source_data = SimNatureFlowSource(config_data, config_data.model_dict["data"]["tRangeTrain"],
                                          self.sim_config_file, self.subdir)
        source_data.write_temp_source()

    def test_natural_flow_in_train(self):
        """using natural flow generated by model trained by choosed allref basins in CAMELS dataset"""
        os.environ["CUDA_VISIBLE_DEVICES"] = "2"  # cuda is geforce 2
        config_data = SimNatureFlowConfig(self.config_file, self.subdir)
        source_data = SimNatureFlowSource.get_sim_nature_flow_source(config_data,
                                                                     config_data.model_dict["data"]["tRangeTrain"],
                                                                     self.sim_config_file, self.subdir)
        # input flow generated by model to model
        training_set = SimInputDataset(source_data)
        train_natural_flow(training_set)

    def test_natural_flow_in_train_runable(self):
        """using natural flow generated by model trained by choosed allref basins in CAMELS dataset"""
        os.environ["CUDA_VISIBLE_DEVICES"] = "2"  # cuda is geforce 2
        config_data = SimNatureFlowConfig(self.config_file, self.subdir)
        source_data = SimNatureFlowSource.get_sim_nature_flow_source(config_data,
                                                                     config_data.model_dict["data"]["tRangeTrain"],
                                                                     self.sim_config_file, self.subdir)
        # input flow generated by model to model
        model_data = SimNatureFlowInput(source_data)
        master_train_natural_flow(model_data)

    def test_sim_nature_flow_source_test(self):
        config_data = SimNatureFlowConfig(self.config_file, self.subdir)
        source_data = SimNatureFlowSource(config_data, config_data.model_dict["data"]["tRangeTest"],
                                          self.sim_config_file, self.subdir)
        source_data.write_temp_source(is_test=True)

    def test_natural_flow_in_test_runable(self):
        """using natural flow generated by model trained by choosed allref basins in CAMELS dataset"""
        config_data = SimNatureFlowConfig(self.config_file, self.subdir)
        source_data = SimNatureFlowSource.get_sim_nature_flow_source(config_data,
                                                                     config_data.model_dict["data"]["tRangeTest"],
                                                                     self.sim_config_file, self.subdir, is_test=True)
        # input flow generated by model to model
        # input flow generated by model to model
        model_data = SimNatureFlowInput(source_data)
        pred, obs = master_test_natural_flow(model_data)

        pred = pred.reshape(pred.shape[0], pred.shape[1])
        obs = obs.reshape(pred.shape[0], pred.shape[1])

        inds = statError(obs, pred)
        show_me_num = 5
        t_s_dict = model_data.data_source.sim_model_data.t_s_dict
        sites = np.array(t_s_dict["sites_id"])
        t_range = np.array(t_s_dict["t_final_range"])
        ts_fig = plot_ts_obs_pred(obs, pred, sites, t_range, show_me_num)
        ts_fig.savefig(os.path.join(config_data.data_path["Out"], "ts_fig.png"))
        # plot box，使用seaborn库
        keys = ["Bias", "RMSE", "NSE"]
        inds_test = subset_of_dict(inds, keys)
        box_fig = plot_boxes_inds(inds_test)
        box_fig.savefig(os.path.join(config_data.data_path["Out"], "box_fig.png"))

    def test_natural_flow_in_test(self):
        """using natural flow generated by model trained by choosed allref basins in CAMELS dataset"""
        config_data = SimNatureFlowConfig(self.config_file, self.subdir)
        source_data = SimNatureFlowSource.get_sim_nature_flow_source(config_data,
                                                                     config_data.model_dict["data"]["tRangeTest"],
                                                                     self.sim_config_file, self.subdir, is_test=True)
        # input flow generated by model to model
        test_set = SimInputDataset(source_data)
        pred, obs = test_natural_flow(test_set)
        print(pred.shape)
        print(obs.shape)


if __name__ == '__main__':
    unittest.main()

import unittest

import definitions
from data import GagesConfig, GagesSource, DataModel
from data.data_config import add_model_param
from data.gages_input_dataset import GagesInvDataModel
from hydroDL.master.master import train_lstm_inv

import os

from utils import serialize_pickle, serialize_json, serialize_numpy, unserialize_pickle, unserialize_json, \
    unserialize_numpy


def save_datamodel(data_model, num_str):
    dir_temp = os.path.join(data_model.data_source.data_config.data_path["Temp"], num_str)
    if not os.path.isdir(dir_temp):
        os.makedirs(dir_temp)
    data_source_file = os.path.join(dir_temp, 'data_source.txt')
    stat_file = os.path.join(dir_temp, 'Statistics.json')
    flow_file = os.path.join(dir_temp, 'flow')
    forcing_file = os.path.join(dir_temp, 'forcing')
    attr_file = os.path.join(dir_temp, 'attr')
    f_dict_file = os.path.join(dir_temp, 'dictFactorize.json')
    var_dict_file = os.path.join(dir_temp, 'dictAttribute.json')
    t_s_dict_file = os.path.join(dir_temp, 'dictTimeSpace.json')
    serialize_pickle(data_model.data_source, data_source_file)
    serialize_json(data_model.stat_dict, stat_file)
    serialize_numpy(data_model.data_flow, flow_file)
    serialize_numpy(data_model.data_forcing, forcing_file)
    serialize_numpy(data_model.data_attr, attr_file)
    # dictFactorize.json is the explanation of value of categorical variables
    serialize_json(data_model.f_dict, f_dict_file)
    serialize_json(data_model.var_dict, var_dict_file)
    serialize_json(data_model.t_s_dict, t_s_dict_file)


def load_datamodel(dir_temp_orgin, num_str):
    dir_temp = os.path.join(dir_temp_orgin, num_str)
    data_source_file = os.path.join(dir_temp, 'data_source.txt')
    stat_file = os.path.join(dir_temp, 'Statistics.json')
    flow_npy_file = os.path.join(dir_temp, 'flow.npy')
    forcing_npy_file = os.path.join(dir_temp, 'forcing.npy')
    attr_npy_file = os.path.join(dir_temp, 'attr.npy')
    f_dict_file = os.path.join(dir_temp, 'dictFactorize.json')
    var_dict_file = os.path.join(dir_temp, 'dictAttribute.json')
    t_s_dict_file = os.path.join(dir_temp, 'dictTimeSpace.json')
    source_data = unserialize_pickle(data_source_file)
    # 存储data_model，因为data_model里的数据如果直接序列化会比较慢，所以各部分分别序列化，dict的直接序列化为json文件，数据的HDF5
    stat_dict = unserialize_json(stat_file)
    data_flow = unserialize_numpy(flow_npy_file)
    data_forcing = unserialize_numpy(forcing_npy_file)
    data_attr = unserialize_numpy(attr_npy_file)
    # dictFactorize.json is the explanation of value of categorical variables
    var_dict = unserialize_json(var_dict_file)
    f_dict = unserialize_json(f_dict_file)
    t_s_dict = unserialize_json(t_s_dict_file)
    data_model = DataModel(source_data, data_flow, data_forcing, data_attr, var_dict, f_dict, stat_dict,
                           t_s_dict)
    return data_model


class MyTestCase(unittest.TestCase):
    def setUp(self) -> None:
        """before all of these, natural flow model need to be generated by config.ini of gages dataset, and it need
        to be moved to right dir manually """
        config_dir = definitions.CONFIG_DIR
        self.config_file_1 = os.path.join(config_dir, "inv/config_inv_1_ex1.ini")
        self.config_file_2 = os.path.join(config_dir, "inv/config_inv_2_ex1.ini")
        self.subdir = r"inv/exp1"
        self.config_data_1 = GagesConfig.set_subdir(self.config_file_1, self.subdir)
        self.config_data_2 = GagesConfig.set_subdir(self.config_file_2, self.subdir)
        add_model_param(self.config_data_1, "model", seqLength=7)

    def test_inv_data_temp(self):
        # data1 is historical data as input of LSTM-Inv, which will be a kernel for the second LSTM
        config_data_1 = self.config_data_1
        source_data_1 = GagesSource(config_data_1, config_data_1.model_dict["data"]["tRangeTrain"])
        df1 = DataModel(source_data_1)
        save_datamodel(df1, "1")

        # data2 is made for second layer, which need to be combined with theta that is generated by lstm-inv and
        # final dim of lstm-inv
        config_data_2 = self.config_data_2
        source_data_2 = GagesSource(config_data_2, config_data_1.model_dict["data"]["tRangeTrain"])
        df2 = DataModel(source_data_2)
        save_datamodel(df2, "2")

    def test_inv_train(self):
        df1 = load_datamodel(self.config_data_1.data_path["Temp"], "1")
        df2 = load_datamodel(self.config_data_2.data_path["Temp"], "2")
        data_model = GagesInvDataModel(df1, df2)
        train_lstm_inv(data_model)


if __name__ == '__main__':
    unittest.main()

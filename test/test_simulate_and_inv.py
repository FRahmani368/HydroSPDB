import unittest

import definitions
from data import GagesConfig, GagesSource, DataModel
from data.data_config import add_model_param
from data.data_input import save_datamodel, load_datamodel
from data.gages_input_dataset import GagesSimInvDataModel
from explore.stat import statError
from hydroDL.master.master import train_lstm_siminv, test_lstm_siminv
import numpy as np
import os

from utils.dataset_format import subset_of_dict
from visual import plot_ts_obs_pred
from visual.plot_model import plot_boxes_inds


class MyTestCaseSimulateAndInv(unittest.TestCase):
    def setUp(self) -> None:
        """before all of these, natural flow model need to be generated by config.ini of gages dataset, and it need
        to be moved to right dir manually """
        config_dir = definitions.CONFIG_DIR
        self.config_file_1 = os.path.join(config_dir, "siminv/config_siminv_1_exp1.ini")
        self.config_file_2 = os.path.join(config_dir, "siminv/config_siminv_2_exp1.ini")
        self.config_file_3 = os.path.join(config_dir, "siminv/config_siminv_3_exp1.ini")
        self.subdir = r"siminv/exp1"
        # self.config_file_1 = os.path.join(config_dir, "siminv/config_siminv_1_exp2.ini")
        # self.config_file_2 = os.path.join(config_dir, "siminv/config_siminv_2_exp2.ini")
        # self.config_file_3 = os.path.join(config_dir, "siminv/config_siminv_3_exp2.ini")
        # self.subdir = r"siminv/exp2"
        # self.config_file_1 = os.path.join(config_dir, "siminv/config_siminv_1_exp3.ini")
        # self.config_file_2 = os.path.join(config_dir, "siminv/config_siminv_2_exp3.ini")
        # self.config_file_3 = os.path.join(config_dir, "siminv/config_siminv_3_exp3.ini")
        # self.subdir = r"siminv/exp3"
        # self.config_file_1 = os.path.join(config_dir, "siminv/config_siminv_1_exp4.ini")
        # self.config_file_2 = os.path.join(config_dir, "siminv/config_siminv_2_exp4.ini")
        # self.config_file_3 = os.path.join(config_dir, "siminv/config_siminv_3_exp4.ini")
        # self.subdir = r"siminv/exp4"
        self.config_data_1 = GagesConfig.set_subdir(self.config_file_1, self.subdir)
        self.config_data_2 = GagesConfig.set_subdir(self.config_file_2, self.subdir)
        self.config_data_3 = GagesConfig.set_subdir(self.config_file_3, self.subdir)
        add_model_param(self.config_data_2, "model", seqLength=7)

    def test_siminv_data_temp(self):
        # data1 is used to generate natural flow
        def savemodel(config_data_now, num_str):
            source_data_now = GagesSource(config_data_now, config_data_now.model_dict["data"]["tRangeTrain"])
            df_now = DataModel(source_data_now)
            save_datamodel(df_now, num_str, data_source_file_name='data_source.txt',
                           stat_file_name='Statistics.json', flow_file_name='flow', forcing_file_name='forcing',
                           attr_file_name='attr', f_dict_file_name='dictFactorize.json',
                           var_dict_file_name='dictAttribute.json', t_s_dict_file_name='dictTimeSpace.json')

        savemodel(self.config_data_1, "1")
        savemodel(self.config_data_2, "2")
        savemodel(self.config_data_3, "3")

    def test_siminv_train(self):
        df1 = load_datamodel(self.config_data_1.data_path["Temp"], "1", data_source_file_name='data_source.txt',
                             stat_file_name='Statistics.json', flow_file_name='flow.npy',
                             forcing_file_name='forcing.npy', attr_file_name='attr.npy',
                             f_dict_file_name='dictFactorize.json',
                             var_dict_file_name='dictAttribute.json',
                             t_s_dict_file_name='dictTimeSpace.json')
        df2 = load_datamodel(self.config_data_2.data_path["Temp"], "2", data_source_file_name='data_source.txt',
                             stat_file_name='Statistics.json', flow_file_name='flow.npy',
                             forcing_file_name='forcing.npy', attr_file_name='attr.npy',
                             f_dict_file_name='dictFactorize.json',
                             var_dict_file_name='dictAttribute.json',
                             t_s_dict_file_name='dictTimeSpace.json')
        df3 = load_datamodel(self.config_data_3.data_path["Temp"], "3", data_source_file_name='data_source.txt',
                             stat_file_name='Statistics.json', flow_file_name='flow.npy',
                             forcing_file_name='forcing.npy', attr_file_name='attr.npy',
                             f_dict_file_name='dictFactorize.json',
                             var_dict_file_name='dictAttribute.json',
                             t_s_dict_file_name='dictTimeSpace.json')
        data_model = GagesSimInvDataModel(df1, df2, df3)
        train_lstm_siminv(data_model)

    def test_siminv_data_temp_test(self):
        def savemodeltest(config_data_now, num_str):
            source_data_now = GagesSource(config_data_now, config_data_now.model_dict["data"]["tRangeTest"])
            df_now = DataModel(source_data_now)
            save_datamodel(df_now, num_str, data_source_file_name='test_data_source.txt',
                           stat_file_name='test_Statistics.json', flow_file_name='test_flow',
                           forcing_file_name='test_forcing', attr_file_name='test_attr',
                           f_dict_file_name='test_dictFactorize.json', var_dict_file_name='test_dictAttribute.json',
                           t_s_dict_file_name='test_dictTimeSpace.json')

        savemodeltest(self.config_data_1, "1")
        savemodeltest(self.config_data_2, "2")
        savemodeltest(self.config_data_3, "3")

    def test_siminv_test(self):
        df1 = load_datamodel(self.config_data_1.data_path["Temp"], "1", data_source_file_name='test_data_source.txt',
                             stat_file_name='test_Statistics.json', flow_file_name='test_flow.npy',
                             forcing_file_name='test_forcing.npy', attr_file_name='test_attr.npy',
                             f_dict_file_name='test_dictFactorize.json',
                             var_dict_file_name='test_dictAttribute.json',
                             t_s_dict_file_name='test_dictTimeSpace.json')
        df2 = load_datamodel(self.config_data_2.data_path["Temp"], "2", data_source_file_name='test_data_source.txt',
                             stat_file_name='test_Statistics.json', flow_file_name='test_flow.npy',
                             forcing_file_name='test_forcing.npy', attr_file_name='test_attr.npy',
                             f_dict_file_name='test_dictFactorize.json',
                             var_dict_file_name='test_dictAttribute.json',
                             t_s_dict_file_name='test_dictTimeSpace.json')
        df3 = load_datamodel(self.config_data_3.data_path["Temp"], "3", data_source_file_name='test_data_source.txt',
                             stat_file_name='test_Statistics.json', flow_file_name='test_flow.npy',
                             forcing_file_name='test_forcing.npy', attr_file_name='test_attr.npy',
                             f_dict_file_name='test_dictFactorize.json',
                             var_dict_file_name='test_dictAttribute.json',
                             t_s_dict_file_name='test_dictTimeSpace.json')
        data_model = GagesSimInvDataModel(df1, df2, df3)
        pred, obs = test_lstm_siminv(data_model)

        pred = pred.reshape(pred.shape[0], pred.shape[1])
        obs = obs.reshape(obs.shape[0], obs.shape[1])

        inds = statError(obs, pred)
        show_me_num = 5
        t_s_dict = data_model.test_t_s_dict
        sites = np.array(t_s_dict["sites_id"])
        # TODO: time been cut, so change it
        t_range = np.array(t_s_dict["t_final_range"])
        ts_fig = plot_ts_obs_pred(obs, pred, sites, t_range, show_me_num)
        ts_fig.savefig(os.path.join(self.config_data_2.data_path["Out"], "ts_fig.png"))
        # plot box，使用seaborn库
        keys = ["Bias", "RMSE", "NSE"]
        inds_test = subset_of_dict(inds, keys)
        box_fig = plot_boxes_inds(inds_test)
        box_fig.savefig(os.path.join(self.config_data_2.data_path["Out"], "box_fig.png"))


if __name__ == '__main__':
    unittest.main()
